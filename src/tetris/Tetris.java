
package tetris;
import javax.swing.ImageIcon;
import java.awt.Color;
import java.awt.event.KeyEvent;
import javax.swing.UIManager;

/**
 *This is the main class of this tetris game
 * The graphical interfaces was made using NetBeans and Jframe pluging
 * 
 * All the media content is made with GIMP. The images are under CC BY-SA 3.0
 * The code is in a public repository https://github.com/Rodriwp/Tetris 
 * under GNU GPL V3
 * 
 * @author Rodrigo Mompo
 * @author Oscar Jimenez Rama
 */
public class Tetris extends javax.swing.JFrame {
    private TetrisGameFunctions gameBoard;
    public SpeedRunnable speed;
    private int gameDimension = 8;
    private int gameControls = 0;
    private boolean pause = true;
    
    public Tetris() {
        
        gameBoard = new TetrisGameFunctions(gameDimension);
        initComponents();
        setBackground(Color.blue);
        setIconImage(new ImageIcon(getClass().getResource("/images/TetrisLogoFondoNegro.png")).getImage());
        //Thread for autogoDown 
         speed = new SpeedRunnable(this,this.gameBoard);
        //End of the thread
         speed.start();
         
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        scoreValue = new javax.swing.JLabel();
        numberPiecesValue = new javax.swing.JLabel();
        canvas2 = new BoardCanvas(gameBoard);
        jLabel3 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem3 = new javax.swing.JCheckBoxMenuItem();
        Controls = new javax.swing.JMenu();
        jCheckBoxMenuItem4 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem5 = new javax.swing.JCheckBoxMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Tetris  Beta 2.0");
        setAlwaysOnTop(true);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setForeground(new java.awt.Color(0, 255, 255));
        setIconImages(null);
        setResizable(false);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("OCR A Std", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 153, 0));
        jLabel1.setText("Score");

        jLabel2.setFont(new java.awt.Font("Trajan Pro", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 153, 0));
        jLabel2.setText(" Pieces");
        jLabel2.setToolTipText("");

        scoreValue.setFont(new java.awt.Font("OCR A Std", 1, 24)); // NOI18N
        scoreValue.setForeground(new java.awt.Color(255, 153, 0));
        scoreValue.setText("0");

        numberPiecesValue.setFont(new java.awt.Font("Trajan Pro", 1, 18)); // NOI18N
        numberPiecesValue.setForeground(new java.awt.Color(255, 153, 0));
        numberPiecesValue.setText("0");

        canvas2.setBackground(new java.awt.Color(0, 0, 0));
        canvas2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        canvas2.setMaximumSize(new java.awt.Dimension(450, 450));
        canvas2.setMinimumSize(new java.awt.Dimension(401, 401));
        canvas2.setPreferredSize(new java.awt.Dimension(410, 410));

        jLabel3.setBackground(new java.awt.Color(255, 0, 0));
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Tetris fondo 1.png"))); // NOI18N
        jLabel3.setOpaque(true);

        jMenuBar1.setForeground(new java.awt.Color(51, 51, 51));

        jMenu1.setText("Game");
        jMenu1.setToolTipText("");

        jMenuItem1.setText("New Game");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Options");

        jMenu5.setText("Board Size");

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("8");
        jCheckBoxMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem1ActionPerformed(evt);
            }
        });
        jMenu5.add(jCheckBoxMenuItem1);

        jCheckBoxMenuItem2.setText("10");
        jCheckBoxMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem2ActionPerformed(evt);
            }
        });
        jMenu5.add(jCheckBoxMenuItem2);

        jCheckBoxMenuItem3.setText("Epic");
        jCheckBoxMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem3ActionPerformed(evt);
            }
        });
        jMenu5.add(jCheckBoxMenuItem3);

        jMenu2.add(jMenu5);

        Controls.setText("Controls");

        jCheckBoxMenuItem4.setSelected(true);
        jCheckBoxMenuItem4.setText("ASDW      L");
        jCheckBoxMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem4ActionPerformed(evt);
            }
        });
        Controls.add(jCheckBoxMenuItem4);

        jCheckBoxMenuItem5.setText("Arrows    Z");
        jCheckBoxMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem5ActionPerformed(evt);
            }
        });
        Controls.add(jCheckBoxMenuItem5);

        jMenu2.add(Controls);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Help");

        jMenuItem2.setText("Controls");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem2);
        jMenu3.add(jSeparator1);

        jMenuItem3.setText("About");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem3);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(canvas2, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(430, 430, 430)
                                .addComponent(jLabel1)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(scoreValue, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(60, 60, 60)
                        .addComponent(numberPiecesValue, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 660, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(canvas2, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addComponent(jLabel2))
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(scoreValue)
                .addGap(18, 18, 18)
                .addComponent(numberPiecesValue))
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabel1))
            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jLabel3.getAccessibleContext().setAccessibleName("backGround");

        getAccessibleContext().setAccessibleParent(canvas2);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        if("P".equals(KeyEvent.getKeyText(evt.getKeyCode()))){
          if(pause){pause = false;}else{pause = true;}
        }
        if(!pause){
            speed.resumeThread();
        BoardCanvas.setPause(false);
        if(BoardCanvas.getGameOver()||!gameBoard.iteration(gameControls,KeyEvent.getKeyText(evt.getKeyCode()))){
                        BoardCanvas.setGameOver(true);
                        canvas2.repaint();
                        speed.stop();
         }else{
         BoardCanvas.setGameOver(false);
         writeNumberPieces();
         writeScore();
         BoardCanvas.setBoard(gameBoard.tempBoard);
         canvas2.repaint();
         }
        }else{
            try{
            speed.pauseThread();}
            catch(Exception e){};
            BoardCanvas.setPause(true);
            canvas2.repaint();
        }
    }//GEN-LAST:event_formKeyReleased

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        newGame(gameDimension);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jCheckBoxMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem1ActionPerformed
        if(jCheckBoxMenuItem1.getState()== true){
            gameDimension = 8;
            jCheckBoxMenuItem2.setState(false);
            jCheckBoxMenuItem3.setState(false);
        }
    }//GEN-LAST:event_jCheckBoxMenuItem1ActionPerformed

    private void jCheckBoxMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem2ActionPerformed
        if(jCheckBoxMenuItem2.getState()== true){
            gameDimension = 10;
            jCheckBoxMenuItem1.setState(false);
            jCheckBoxMenuItem3.setState(false);
        }
    }//GEN-LAST:event_jCheckBoxMenuItem2ActionPerformed

    private void jCheckBoxMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem3ActionPerformed
        if(jCheckBoxMenuItem3.getState()== true){
            gameDimension = 20;
            jCheckBoxMenuItem1.setState(false);
            jCheckBoxMenuItem2.setState(false);
        }
    }//GEN-LAST:event_jCheckBoxMenuItem3ActionPerformed

    private void jCheckBoxMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem4ActionPerformed
        if(jCheckBoxMenuItem4.getState()== true){
            gameControls = 0;
            jCheckBoxMenuItem5.setState(false);
        }
    }//GEN-LAST:event_jCheckBoxMenuItem4ActionPerformed

    private void jCheckBoxMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem5ActionPerformed
        if(jCheckBoxMenuItem5.getState()== true){
            gameControls = 1;
            jCheckBoxMenuItem4.setState(false);
        }
    }//GEN-LAST:event_jCheckBoxMenuItem5ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        DialogMessage message = new DialogMessage(this,0);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        DialogMessage message = new DialogMessage(this,1);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    public void writeNumberPieces(){
        String value = Integer.toString(gameBoard.getSNumberPieces());
        this.numberPiecesValue.setText(value);}
    public void writeScore(){
        String value = Integer.toString(gameBoard.getScore());
        this.scoreValue.setText(value);}
    public void newGame(int dimensionGame){
        gameBoard = new TetrisGameFunctions(dimensionGame);
        writeNumberPieces();
        writeScore();
        
        BoardCanvas.setBoard(gameBoard.tempBoard);
        BoardCanvas.setGameOver(false);
        pause = true;

            try{
            speed.pauseThread();}
            catch(Exception e){};
            BoardCanvas.setPause(true);
        speed.stop();
        speed = new SpeedRunnable(this,this.gameBoard);
        speed.start();
        pause = true;
        try{
        speed.pauseThread();}
        catch(Exception e){};
        BoardCanvas.beginning = 0;
        canvas2.repaint();
        
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                /*if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }*/
                UIManager.setLookAndFeel("com.jtattoo.plaf.acryl.AcrylLookAndFeel");
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tetris.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tetris.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tetris.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tetris.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        
       java.awt.EventQueue.invokeLater( new Thread(new Runnable() {
            public void run() {
              Tetris frame = new Tetris();
              frame.setVisible(true);  
              
              
            } 
        }));
      
        
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Controls;
    public java.awt.Canvas canvas2;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem3;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem4;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JLabel numberPiecesValue;
    private javax.swing.JLabel scoreValue;
    // End of variables declaration//GEN-END:variables
}
